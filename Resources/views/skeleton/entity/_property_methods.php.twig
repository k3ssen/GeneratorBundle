{# @var meta_entity \K3ssen\GeneratorBundle\MetaData\MetaEntityInterface #}
{# @var property \K3ssen\GeneratorBundle\MetaData\Property\AbstractProperty #}
{% block property_methods %}
{% if meta_entity.idProperty is null and skip_id is not defined %}

    public function getId(): ?int
    {
        return $this->id;
    }
{% endif %}
{% for property in meta_entity.properties %}

{% if 'Collection' in property.returnType %}{{ block('property_collection_methods') }}{% else %}
    public function get{{ property.name | classify }}(): ?{{ property.returnType(property) }}
    {
        return $this->{{ property.name }};
    }

    public function set{{ property.name | classify }}({{ property.nullable ? '?' : '' }}{{ property.returnType(property) }} ${{ property.name }}): self
    {
        $this->{{ property.name }} = ${{ property.name }};
        return $this;
    }
{% endif %}
{% endfor %}
{% endblock %}

{% block property_collection_methods %}
{# @var property \K3ssen\GeneratorBundle\MetaData\Property\RelationMetaPropertyInterface #}
    /**
     * @return ArrayCollection|{{ property.targetEntity.name }}[]
     */
    public function get{{ property.name | classify }}(): Collection
    {
        return $this->{{ property.name }};
    }

    public function add{{ property.name | singularize | classify }}({{ property.targetEntity.name }} ${{ property.name | singularize }}): self
    {
        if (!$this->{{ property.name }}->contains(${{ property.name | singularize }})) {
            $this->{{ property.name }}->add(${{ property.name | singularize }});
{% if property.ormType == 'ManyToMany' and (property.inversedBy or property.mappedBy) %}
            ${{ property.name | singularize }}->add{{ (property.inversedBy|default(property.mappedBy)) | singularize | classify }}($this);
{% elseif property.mappedBy %}
            ${{ property.name | singularize }}->set{{ property.mappedBy | classify }}($this);
{% endif %}
        }
        return $this;
    }

    public function remove{{ property.name | singularize | classify }}({{ property.targetEntity.name }} ${{ property.name | singularize }}): self
    {
        if ($this->{{ property.name }}->contains(${{ property.name | singularize }})) {
            $this->{{ property.name }}->removeElement(${{ property.name | singularize }});
{% if property.ormType == 'ManyToMany' and (property.inversedBy or property.mappedBy) %}
            ${{ property.name | singularize }}->remove{{ (property.inversedBy|default(property.mappedBy)) | singularize | classify }}($this);
{% endif %}
        }
{% if property.ormType != 'ManyToMany' and (property.mappedBy or property.inversedBy) %}
        if (${{ property.name | singularize }}->get{{ (property.inversedBy|default(property.mappedBy)) | classify }}() === $this) {
            ${{ property.name | singularize }}->set{{ (property.inversedBy|default(property.mappedBy)) | classify }}(null);
        }
{% endif %}
        return $this;
    }
{% endblock %}